11/03
Primer problema: Correr la aplicacion

	En estas instancias la información que poseo es escasa, inclusive consultando videos sobre el tema, por lo cual
me dispuse a realizar un curso de Spring Boot en el cual se muestra como utilizar annotations para crear API Rest y 
controladores junto con servicios.
-----------------------------------------------------------------------------------------------------------------------------------
11/06
Primer Logro: Corre el inicio del programa
	
	Luego de investigar y ponerme al tanto con el curso que estoy realizando, logré configurar correctamente un proyecto
Java con Maven utilizando Spring Boot, con las dependencias correspondientes para poder utilizar las annotations que requiera.

Procedimiento
	- Cree los packages correspondientes para mantener la estructura del proyecto ordenada, dentro del package "controllers"
creé el controlador de "inicio" (InicioController.java), el cual solo es una clase que mapea mi JSP de la pagina de inicio a 
traves de la annotation @GetMapping("/"). Esto vendría a asemejarse a lo que en la versión anterior de mi proyecto era el Servlet
de inicio "InicioServlet".
	- En el package "models" ubiqué hasta el momento solo las clases Usuario, Cliente y Prestador, que por ahora no se utilizan.
	- Decidi implementar ademas de Spring Boot, el framework conocido como Hibernate, para aprender a utilizar con las annotations
	correspondientes a JPA.
-----------------------------------------------------------------------------------------------------------------------------------
18/06
Segundo Problema: Implementar Hibernate
Procedimiento
	- Al agregar los packages de "repositories" y "services" junto con las clases e interfaces para poder proceder con el registro 
de algun tipo de usuario, aparecieron mas conflictos a la hora de buildear el proyecto. Consulté el registro de errores del proyecto a 
ChatGPT y me sugirió cambiar la version de dialecto de Hibernate:

"El error que estás experimentando indica que Hibernate no puede cargar la clase org.hibernate.dialect.MySQL5Dialect. 
Esto se debe a que parece que la clase no se encuentra en el classpath.

Hay varias cosas que debes verificar y corregir:

1. Dialecto de Hibernate
A partir de Hibernate 5.3, los dialectos de MySQL fueron renombrados. 
Si estás utilizando una versión más reciente de Hibernate, deberías 
usar org.hibernate.dialect.MySQL8Dialect en lugar de org.hibernate.dialect.MySQL5Dialect.

2. Configuración del Dialecto
Asegúrate de que el dialecto está correctamente configurado en tu application.properties 
o application.yml.

3. Dependencia de Hibernate
Verifica que tienes la dependencia correcta de Hibernate en tu pom.xml."

	- Corrección:

En application.properties cambie org.hibernate.dialect.MySQL5Dialect por org.hibernate.dialect.MySQL8Dialect, verifiqué ademas las dependencias
correspondientes a Hibernate, y estaban correctamente colocadas dentro del archivo Pom.
-----------------------------------------------------------------------------------------------------------------------------------
1/07
Tercer problema: Clases abstracta Usuario y sus tipos Cliente y Prestador (Subclases) ---> Error de mapeo de herencias

Con el agregado de las clases : Usuario y Cliente (Usuario como superclase abstracta y Cliente como subclase)
tuve un inconveniente en la configuración para mapear a Cliente como subclase, visto que ambas tienen una relación
de este tipo mediante clave foranea o FK en las distintas tablas de la base de datos.
Al intentar correr la aplicación, el stack trace me confirmaba que no estaba utilizando bien las etiquetas o annotations
dentro de la clase Cliente, indagando, pude localizar la falla en el codigo para poder mapear correctamente la relación 
de herencia que tenian esta clases. A todo esto, tuve que cambiar la configuración de Hibernate, ya que no solo verificaba las tablas de mi base de 
datos, sino que ademas las modificaba y agregaba campos extra, esto lo hice dentro de applicationProperties cambiando de:

	spring.jpa.hibernate.ddl-auto=update
			a
	spring.jpa.hibernate.ddl-auto=validate.

Procedimiento:
	- Consulté dos videos sobre mapeo de relaciones con JPA(Java Persistence Api) a través de annotations:
	links: 
		https://www.youtube.com/watch?v=hNG8Xq5ypuM&t=1098s
		https://www.youtube.com/watch?v=g3z9IZukLEI

	A la par tambien consulté con GPT aunque se prestaba mas para confusiones que otra cosa. Gracias a los videos
pude ilustrarme sobre como hacer el mapeo de herencia correctamente, para poder buildear  y poder correr la aplicación como 
se debía, cosa que al final pude lograr, y al hacerlo descubri que tenía que corregir varias cosas, como el uso de @PrimaryKeyJoinedColumn
@Inheritance y los tipos de estrategia(yo utilicé JOINED debido a que utilizo dos tablas para diferenciar el tipo de usuario), el agregado
de la clase Administrador fue clave, ya que no podía instanciar Usuarios si no existia un administrador, el uso de las annotations 
@OneToMany y @ManyToOne para las relaciones de administrador con usuarios, @Autowired @Service @Repository @Entity @Column junto con sus
propiedades.

6/07
Segundo logro: Registro de Usuarios (Clientes y Prestadores)
	- Hasta este momento, no podía instanciar un Cliente o Prestador a traves del uso del formulario JSP, y esto se debía a que en el
controlador de registro, instanciaba Cliente y Prestador, sin antes instanciar un Administrador o buscando el administrador en la base de 
datos, asi que procedi a instanciar uno para probar a ver si el conflicto desaparecía, y así ocurrió. Una vez que pude por fín instanciar 
un usuario de esta forma, hice algunos cambios:
	-Creé un package "configurations" y alli una clase de configuracion inicial llamada "DataInitializer" en la cual a través de las
annotations @Configuration y @PostConstruct junto con el metodo "init()" verifico si en la base de datos existe algun administrador, y en
caso de que no, se instancia uno y se guarda en la BDD. De esta forma para instanciar algun Usuario, buscamos solo al admin en la BDD y 
utilizamos el atributo necesario (segun la clase que lo requiera).
-----------------------------------------------------------------------------------------------------------------------------------
08/07
Tercer Logro: Inicio y Cierre de sesion
	- A través de un unico controlador, se logró iniciar sesión a partir de un usuario creado y luego cerrar la sesión y volver a la
pagina de inicio.

18/07
Cuarto Logro: Se crea y se almacena una sucursal
	Se agregaron JSP que incluyen el formulario para controlar Sucursales y el form para cotrolar Salas. Se refactoreó el código perte-
neciente a la clase LoginController, y se configuró para cargar información pertinente luego de iniciar sesión, ademas agregamos el contro-
lador para Sucursales, en el cual se encuentran los algoritmos pertenecientes al CRUD de las mismas, hasta ahora pudimos lograr crear una 
'sucursal' e ingresarla en la base de datos, no sin antes resolver bastantes cuestiones.

Luego de muchas pruebas intentando crear através del formulario una sucursal, probe la busqueda por ID de una entidad dentro de la base de 
datos, en particular la de un Prestador, haciendo unos cambios en el repositorio y servicios de Prestador. El metodo que debería buscar el 
Prestador por ID, devuelve Optional<Prestador> o sea, practicamente me devuelve el prestador o null, la cuestion fue que Hibernate por defec
to, buscaba el Prestador por ID pero se basaba en el ID de Usuario, ya que la herencia se entiende de esa manera por como estan mapeadas las
entidades, por lo cual tuve que modificar la solicitud SQL mediante la annotation @Query que Spring framework provee, esto permite realizar
otra solicitud que nosotros querramos, alli la configuré para que busque al Prestador por su propia ID 
 "SELECT p FROM Prestador p WHERE p.idPrestador = :idPrestador"
De esta manera, realizando esos cambios y agregando excepciones a la hora de realizar el llamado a la funcion que realiza la busqueda por ID
pude recorrer mejor la BDD para buscar el dato que necesitaba para la creación de la Sucursal.
Otra complicación que se tuvo, fue que luego de crear una Sucursal, intente editarla y eliminarla, pero esto resulto trabajoso de resolver.
Analicé una y otra vez el CRUD dentro de SucursalController realizado pura y exclusivamente con @GetMapping y @PathVariable, refactoricé varias
veces el controlador y obtuve errores 500, 404 y 405. Finalmente verifiqué el JSP que realizaba la consulta hacia este controlador y entendí 
que la Query String no se debía enviar como lo hacía cuando utilizaba servlets, sino que debía apuntar al mapeo del controlador y enviar direc-
tamente el numero de id de la sucursal que necesitaba modificar.

22/07
Quinto Logro: implementación de Spring Security - Encriptado de passwords 
Una vez ya terminado el controlador de sucursales, me dispuse a refactorear el controlador de inicio para poder actualizar la lista de recursos 
requerida por cada tipo de usuario, ya que una vez creada una sucursal hasta no volver a iniciar sesión, no volvía a actualizarse la lista en 
la pagina de inicio. Al mismo tiempo tambien me di cuenta que sin iniciar sesión podía acceder a ciertos controladores mapeados vía URL, por lo
cual busque información sobre autenticación de usuarios para restringir el acceso a los mismos sin haber antes iniciado sesión con algun tipo de
usuario, consulté con chatGPT y me sugirió utilizar Authentication de Spring Security, que recopila los datos del nombre de usuario, con ese 
dato busco al usuario y seteo los atributos que necesite. Por otro lado, tambien busque videos informativos en los que se realizaban estos proce
dimientos:
-"https://www.youtube.com/watch?v=AImMo4QFiqE"
-"https://www.youtube.com/watch?v=bgKmkgVuek8"
y en ellos tambien descubrí que para implementar la autenticación debía crear una configuración de seguridad, y en ella el gestor de la autentica
ción en cuestión, alli se le presentan los detalles del usuario a autenticar (Por convención se utilizan el nombre de usuario, su password y su 
autoridad/rol) la clase mapeada como configuración la llamé SecurityConfig, donde hay metodos mapeados como beans que se encargan de realizar el
trabajo de permitir o autorizar ciertos mapeos y acceso a determinadas rutas del proyecto anteriores a la autenticación del usuario, e incluso 
posteriores, ya que tambien se configuran las rutas a las cuales determinados tipos de usuarios tienen acceso o no segun su rol. El rol/autoridad
de cada usuario tambien se pudo configurar dentro de SecurityConfig y CustomUserDetailsService (Clase nueva que extiende de UserDetailsService
que utilizo para configurar el objeto de tipo User necesario para realizar una autenticación como se debe) de esta manera, teniendo lo requerido
ya se puede iniciar sesión con cualquiera de los usuarios registrados de manera segura, con encriptado y codificado de password.<-- Commit 26/07.

27/07
Sexto Logro: CRUD de Salas de ensayo completo
Se agregó el controlador para la clase Sala, en él está configurado el CRUD personalizado para la visualización de las salas de ensayo acorde a
la sucursal que se seleccionó, y para usuarios cuyos roles son Prestador o Administrador, la creación, edición y eliminación de las mismas.
Lo laborioso en este caso fue ajustar los atributos de modelo y peticiones en los botones y links de los JSP correspondientes a las consultas 
mapeadas para el controlador mismo, ya que para algunos casos utilicé @PathVariable y en otros @RequestParam, a futuro me gustaría cambiar en 
todos los controladores el uso de @PathVariable por @RequestParam, ya que se adecuaba mejor a lo aprendido sobre QueryString durante las clases
referidas al proyecto en la segunda parte de la cursada de esta asignatura.

30/07
Septimo Logro: CRUD de Reservas completo
Se agregó el controlador para la clase Reserva, donde configuré el CRUD tambien personalizado para poder visualizar reservas realizadas por cli
entes mediante un jsp preparado para ver lo necesario de cada tipo de usuario. Estas reservas pueden ser creadas/modificadas/eliminadas por 
Clientes (solo las suyas), Prestadores (solo reservas hechas en alguna de sus sucursales), y el Administrador. Acá tambien hubo que ajustar los
atributos de modelo de los jsp pero no las peticiones, ya que en los métodos con @GetMapping utilicé @RequestParam. 
Mi mayor conflicto para lograr que el controller funcione en su totalidad, fue dentro del metodo mapeado con @PostMapping "deleteReserva", en el
cual se obtenía por request el id de la reserva realizada y con ese dato realizaba la peticion de eliminación con el service creado para Reserva
asi mismo, dentro del service se usaba el repository con los metodos disponibles para crear, editar, eliminar u obtener todas las entidades, en
este caso empecé utilizando "deleteById" pero despues de varias pruebas Hibernate no realizaba la petición a la base de datos. Luego probé rea
lizando otro método "deleteByIdReserva" tanto en el service como en el repository pero allí el log de Spring generaba un error que no pude 
terminar de entender, asi que decidi averiguar como configurar el metodo del repository para cambiar/forzar la utilización de la consulta que ne
cesito, antes lo había logrado solo con @Query, pero en esta ocación no funcionó, por lo cual decidi buscar mas información y encontré dos videos:

-"https://www.youtube.com/watch?v=RNmiRbWvFRc"
-"https://www.youtube.com/watch?v=Z6p0RkHPwmY"

Con la información que obtuve de los videos, decidí utilizar las annotations @Modifying que indica que la consulta es una operacion de modificación
(INSERT,UPDATE,DELETE), @Transactional marca a las acciones del método para que se ejecuten como una transacción, @Query que especifica la consulta 
JPQL(Java Persistence Query Languaje) para eliminar la reserva con el id que se proporciona y @Param dentro del argumento del método para vincular 
el parámetro de la @Query al método creado. De esta forma refactoricé esa porción del repository, y luego volvi a correr la aplicación y a loguear
me como cliente, alli realicé una reserva correctamente, la pude editar luego, y finalmente pude eliminarla del registro, el log de hibernate mostró
la ejecución de la query "DELETE" como se debía.
Adicionalmente, dentro de la base de datos edite las relaciones mediante FK entre las entidades o tablas, para que se actualicen o eliminen en cas
cada, de esta forma por ejemplo al eliminar una sucursal, se eliminaran respectivamente todas las reservas realizadas en la sucursal, y todas las
salas de ensayo dentro de la sucursal, esto evita de cierta forma tener que realizar codigo extra e iteraciones para eliminar recursos dentro de
otros recursos.

03/08
Octavo Logro: Listas de reservas especifica para Administrador y para Prestador
Dentro del controlador de Reserva, cree dos metodos que utilizan @GetMapping para la visualización de las listas de reservas. En el caso de los pres
tadores verán las que se hayan realizado en alguna de las salas de sus sucursales, y en el caso del Administrador, verán las reservas totales reali
zadas en todas las sucursales.

06/08
Personalización de mensajes de error o de proceso exitoso completa.

11/08
Noveno Logro: CRUD de Usuarios completo
Estaba buscando darle una vuelta mas de rosca al proyecto, asi que a diferencia de la versión anterior, en donde los usuarios solo podían visualizarse
y eliminarse, decidí agregar la posibilidad de que cada usuario (salvo el Administrador, por ahora) puedan editar sus atributos (menos el ID), para
eso cree el controlador UsuarioController, en donde se encuentran los metodos que se encargan de crear y eliminar (para los Administradores), y editar
usuarios. Se refactoreó la navbar agregando un botón "Editar Cuenta" para poder acceder al controlador y realizar el Update para las entidades.

12/08
Décimo Logro: Validación de Reservas
Teniendo completo el CRUD de reservas hace ya unos días, decidi ultimar detalles como validaciones para el final, por si llegaban a ocurrir problemas o
confusiones. Asi que en cuanto terminé con el grueso, me enfoqué en la lógica para realizar los 'throw exception' si se cumplian determinadas condiciones
al tener acceso a todos los objetos que se relacionan, fue sencillo esta vez pensar bajo qué concepto una reserva puede existir, asi que dicté los termi
nos para mandar excepciones. Luego hice el llamado a esta función en los métodos @PostMapping correspondientes ("/edit","/create"), de esta manera, antes 
de realizar la reserva, la misma se valida y si todo esta bien, se realiza correctamente, sino, las excepciones se haran vigentes en el jsp de reservas.
